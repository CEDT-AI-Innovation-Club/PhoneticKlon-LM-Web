import streamlit as st
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import re
import pandas as pd
from datetime import datetime
import os

# Define file path for server-side CSV storage
csv_file_path = 'poem_history_server.csv'

# Function to append a new entry to the CSV file
def save_to_csv_server_side(prompt, poem):
    new_entry = pd.DataFrame({
        'timestamp': [datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
        'prompt': [prompt],
        'poem': [poem]
    })
    
    if os.path.exists(csv_file_path):
        # Append without writing header
        new_entry.to_csv(csv_file_path, mode='a', header=False, index=False)
    else:
        # Write with header
        new_entry.to_csv(csv_file_path, mode='w', header=True, index=False)

# Set page title and layout
st.set_page_config(page_title="Thai Poem Generator", layout="wide")

# Custom CSS to improve readability
st.markdown("""
<style>
    .poem-output {
        font-family: 'Sarabun', sans-serif;
        font-size: 18px;
        line-height: 1.6;
        background-color: #F0F2F6;
        padding: 20px;
        border-radius: 5px;
        white-space: pre-wrap;
    }
    .main .block-container {
        padding-top: 2rem;
    }
</style>
""", unsafe_allow_html=True)

# Title and description
st.title("üåæ PhoneticKlon-LM : AI ‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏≠‡∏ô")
st.markdown("""
‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤ 2110572 NLP SYSTEM
‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏≠‡∏ô‡πÅ‡∏õ‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏â‡∏±‡∏ô‡∏ó‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Fine-Tune ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏°‡πâ‡∏°‡∏µ Dataset ‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢    
""")

# Define available models
available_model_id = {
    "nmt-mixed": "Pongsaky/llama3.2-typhoon2-1b-instruct-tagged_nmt-mixed",
    "nmt_syllable_mixed": "Pongsaky/llama3.2-typhoon2-1b-instruct-tagged_nmt_syllable_mixed",
    "non-nmt": "Pongsaky/llama3.2-typhoon2-1b-instruct-tagged_non-nmt",
}

# Model tags list (same as dictionary keys)
model_tags = list(available_model_id.keys())

# Sidebar for model settings
st.sidebar.title("Model Settings")

# Model selection dropdown
model_choice = st.sidebar.selectbox(
    "Select Model", 
    options=range(len(model_tags)),
    format_func=lambda x: model_tags[x],
)
model_id = available_model_id[model_tags[model_choice]]

# Generation parameters
temperature = st.sidebar.slider("Temperature", min_value=0.1, max_value=2.0, value=0.9, step=0.1)
top_p = st.sidebar.slider("Top P", min_value=0.1, max_value=1.0, value=0.9, step=0.1)
top_k = st.sidebar.slider("Top K", min_value=1, max_value=50, value=15, step=1)
max_new_tokens = st.sidebar.slider("Maximum Length", min_value=50, max_value=1000, value=512, step=50)
tab_format = st.sidebar.slider("tab_format", min_value=1, max_value=5, value=4, step=1)


if 'user_input' not in st.session_state:
    st.session_state.user_input = ""

# Text input area
user_input = st.text_area(
    "Enter your prompt:", 
    value=st.session_state.user_input,
    placeholder="‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà...", 
    height=100,
    key="user_input"  # This connects the widget to session state
)

# Helper functions
upper_vowel = ["‡πà", "‡πâ", "‡πä", "‡πã", "‡πá", "‡∏¥", "‡∏µ", "‡∏∂", "‡∏∑", "‡∏∏", "‡∏π", "‡πå", "‡∏±"]

@st.cache_resource
def load_model(model_id):
    tokenizer = AutoTokenizer.from_pretrained(model_id)
    model = AutoModelForCausalLM.from_pretrained(
        model_id,
        torch_dtype=torch.bfloat16,
        device_map="auto",
    )
    return tokenizer, model

def print_poem_formatted(text):
    # lines = text.split('\n')
    
    # max_width = -1
    # for line in lines:
    #     if '\t' in line:
    #         first_tab = line.split('\t')[0]
    #         tab_length = len(first_tab) - sum(1 for char in first_tab if char in upper_vowel)
    #         max_width = max(max_width, tab_length)
    
    # max_width += 4
    # formatted_poem = []
    
    # for line in lines:
    #     if '\t' in line:
    #         tabs = line.split('\t')
    #         formatted_line = ""
    #         for i, tab in enumerate(tabs):
    #             vowels_count = sum(1 for char in tab if char in upper_vowel)
    #             char_length = len(tab) - vowels_count
                
    #             formatted_line += tab
    #             if i < len(tabs) - 1:  # If not the last tab
    #                 formatted_line += "<span style=\"display:inline-block; width:0.6em;\"></span>" * (max_width - char_length)
    #         formatted_poem.append(formatted_line)
    #     else:
    #         formatted_poem.append(line)
    
    # return "\n".join(formatted_poem)
    return text.replace("\t", "\t"*tab_format).replace("\n", "<br>")  # Replace tabs with spaces and newlines with <br>

def remove_non_thai_characters(text):
    thai_char_pattern = r"[‡∏Å-‡πô\n\t]"
    cleaned_text = "".join(re.findall(thai_char_pattern, text))
    return cleaned_text
st.caption("üìù Your prompt and the generated poem will be saved to help improve the model.")

# Generate button
if st.button("Generate Poem", type="primary"):
    if user_input:
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏≠‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..."):
            try:
                # Load model and tokenizer
                tokenizer, model = load_model(model_id)
                
                # Prepare messages
                messages = [
                    {
                        "role": "system",
                        "content": "You are an expert Thai poet specializing in `‡∏Å‡∏•‡∏≠‡∏ô‡πÅ‡∏õ‡∏î` (Eight-syllable verse) poetry. When a user provides a prompt, respond ONLY with a Thai poem (2-4 stanzas) that addresses their request, without any explanations or commentary. Your poem must strictly follow traditional ‡∏Å‡∏•‡∏≠‡∏ô‡πÅ‡∏õ‡∏î structure and rhyming patterns. Include phonetic rhyming tags for all rhyming words using the format: `<r>[vowel][ending consonant]word</r>` (examples: `<r>[a][w]‡πÄ‡∏Ç‡∏≤</r>`, `<r>[o][k]‡∏ô‡∏Å</r>`, `<r>[a]‡∏ú‡∏≤</r>`, `<r>[i]‡∏®‡∏£‡∏µ</r>`). These tags should mark all external and internal rhymes according to proper ‡∏Å‡∏•‡∏≠‡∏ô‡πÅ‡∏õ‡∏î structure. Create vivid, culturally appropriate poetry that demonstrates mastery of Thai prosody while faithfully addressing the user's requested theme or scenario."
                    },
                    {
                        "role": "user",
                        "content": user_input
                    },
                ]
                
                # Generate poem
                input_ids = tokenizer.apply_chat_template(
                    messages,
                    add_generation_prompt=True,
                    return_tensors="pt"
                ).to(model.device)
                
                terminators = [
                    tokenizer.eos_token_id,
                    tokenizer.convert_tokens_to_ids("<|eot_id|>")
                ]
                
                outputs = model.generate(
                    input_ids,
                    max_new_tokens=max_new_tokens,
                    eos_token_id=terminators,
                    do_sample=True,
                    temperature=temperature,
                    top_p=top_p,
                    top_k=top_k,
                )
                
                response = outputs[0][input_ids.shape[-1]:]
                text_response = tokenizer.decode(response, skip_special_tokens=True)
                thai_response = remove_non_thai_characters(text_response)
                save_to_csv_server_side(user_input, thai_response)

                # # Display results in tabs for better organization
                # tab1, tab2 = st.tabs(["Untagged Output", "Tagged Output (with rhyming tags)"])
                
                # with tab1:
                st.markdown(f'<div class="poem-output">{print_poem_formatted(thai_response)}</div>', unsafe_allow_html=True)
                
                # with tab2:
                #     st.markdown(f'<div class="poem-output">{text_response}</div>', unsafe_allow_html=True)
                
                
            except Exception as e:
                st.error(f"An error occurred: {e}")
    else:
        st.error("Please enter a prompt to generate a poem.")

# Example prompts section
st.markdown("## Example Prompts")
col1, col2 = st.columns(2)

examples = [ "‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏•‡∏°‡πÅ‡∏£‡∏á",
            "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡∏£‡∏ì‡∏ô‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏£‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏¢‡∏¥‡∏ö‡∏£‡∏∞‡∏¢‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤",
            "‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏ß‡∏™‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏µ‡πâ‡∏¢‡∏ß‡∏û‡∏≤‡∏£‡∏≤‡∏™‡∏µ‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢",
            "‡∏Ç‡∏≠‡∏Å‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡∏•‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥",
            "‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡∏ö‡∏ï‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏â‡∏±‡∏ô‡∏Å‡πá‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÉ‡∏à ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡∏ö‡∏ï‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏â‡∏±‡∏ô‡∏Å‡πá‡∏£‡∏π‡πâ‡∏ó‡∏±‡∏ô‡πÉ‡∏î ‡∏ß‡πà‡∏≤‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏£‡∏≠",
            "‡πÄ‡∏¢‡∏•‡∏•‡∏µ‡πà‡∏¢‡∏∏‡∏ó‡∏ò‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡πÉ‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô ‡πÇ‡∏Ñ‡∏ï‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÄ‡∏Ñ‡∏µ‡πâ‡∏¢‡∏ß‡πÄ‡∏û‡∏•‡∏¥‡∏ô‡∏ô‡∏∏‡πà‡∏°‡∏•‡∏¥‡πâ‡∏ô ‡∏à‡∏∞‡πÑ‡∏õ‡∏ö‡∏≠‡∏Å‡πÅ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏´‡∏ô‡∏π‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô ",
            "‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏≠‡∏ô‡πÅ‡∏õ‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ù‡πâ‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏à‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ù‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢",
]

# Function to set example text
def set_example(example_text):
    st.session_state.user_input = example_text

st.button(f"üåä \"‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏•‡∏°‡πÅ‡∏£‡∏á\"", key="example_0", on_click=set_example, args=(examples[0],))
st.button(f"üåå \"‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡∏£‡∏ì‡∏ô‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏£‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏¢‡∏¥‡∏ö‡∏£‡∏∞‡∏¢‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤\"", key="example_1", on_click=set_example, args=(examples[1],))
st.button(f"üåπ \"‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏ß‡∏™‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏µ‡πâ‡∏¢‡∏ß‡∏û‡∏≤‡∏£‡∏≤‡∏™‡∏µ‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢\"", key="example_2", on_click=set_example, args=(examples[2],))
st.button(f"‚õ∞Ô∏è \"‡∏Ç‡∏≠‡∏Å‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡∏•‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥\"", key="example_3", on_click=set_example, args=(examples[3],))
st.button(f"ü•∞ \"‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡∏ö‡∏ï‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏â‡∏±‡∏ô‡∏Å‡πá‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÉ‡∏à ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡∏ö‡∏ï‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏â‡∏±‡∏ô‡∏Å‡πá‡∏£‡∏π‡πâ‡∏ó‡∏±‡∏ô‡πÉ‡∏î ‡∏ß‡πà‡∏≤‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏£‡∏≠\"", key="example_4", on_click=set_example, args=(examples[4],))
st.button(f"üç≠ \"‡πÄ‡∏¢‡∏•‡∏•‡∏µ‡πà‡∏¢‡∏∏‡∏ó‡∏ò‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡πÉ‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô ‡πÇ‡∏Ñ‡∏ï‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÄ‡∏Ñ‡∏µ‡πâ‡∏¢‡∏ß‡πÄ‡∏û‡∏•‡∏¥‡∏ô‡∏ô‡∏∏‡πà‡∏°‡∏•‡∏¥‡πâ‡∏ô ‡∏à‡∏∞‡πÑ‡∏õ‡∏ö‡∏≠‡∏Å‡πÅ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏´‡∏ô‡∏π‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô \"", key="example_5", on_click=set_example, args=(examples[5],))
st.button(f"üëÆüèª \"‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏≠‡∏ô‡πÅ‡∏õ‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ù‡πâ‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏à‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ù‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢\"", key="example_6", on_click=set_example, args=(examples[6],))


# Footer
st.markdown("---")
st.markdown("‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤ 2110572 NLP SYSTEM")
st.markdown("**‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°:**")
st.markdown("- ‡∏Å‡∏±‡∏°‡∏õ‡∏ô‡∏≤‡∏ó ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏™‡∏£‡∏µ")
st.markdown("- ‡∏û‡∏á‡∏®‡∏Å‡∏£ ‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏à‡∏î‡∏µ")
st.markdown("- ‡∏ò‡∏ô‡∏ò‡∏£‡∏ì‡πå ‡∏õ‡∏¢‡∏∞‡∏ä‡∏≤‡∏ï‡∏¥")
st.markdown("‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å <a href='https://medium.com/@kampanatyingseree4704/klonsuphap-lm-%E0%B9%81%E0%B8%95%E0%B9%88%E0%B8%87%E0%B8%81%E0%B8%A5%E0%B8%AD%E0%B8%99%E0%B9%81%E0%B8%9B%E0%B8%94-%E0%B8%94%E0%B9%89%E0%B8%A7%E0%B8%A2-gpt-2-d2baffc80907'>Klonsuphap-LM</a>", unsafe_allow_html=True)

st.markdown(
    """
    <hr style="margin-top: 50px; margin-bottom: 10px;">
    <p style="font-size: 0.8rem; color: gray; text-align: center;">
    ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏î ‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡πÉ‡∏ä‡πâ
    </p>
    """,
    unsafe_allow_html=True
)
